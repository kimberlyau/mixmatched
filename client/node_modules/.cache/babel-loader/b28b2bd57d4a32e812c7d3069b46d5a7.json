{"ast":null,"code":"var _jsxFileName = \"/Users/kimau/Desktop/git/mixmatched/client/src/context/auth/AuthState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport AuthContext from './authContext';\nimport authReducer from './authReducer';\nimport { USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_ERRORS } from '../types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AuthState = props => {\n  _s();\n\n  const initialState = {\n    token: localStorage.getItem('token'),\n    isAuthenticated: null,\n    loading: true,\n    user: null,\n    error: null\n  };\n  const [state, dispatch] = useReducer(authReducer, initialState); // Load User\n\n  const loadUser = async () => {\n    // TODO: load token into global headers\n    try {\n      const res = await axios.get('/api/auth'); // res.data: valid user data\n\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n    } catch (error) {\n      dispatch({\n        type: AUTH_ERROR\n      });\n    }\n  }; // Login User\n  // Logout - destroy token\n  // Clear Errors\n\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      token: state.token,\n      isAuthenticated: state.isAuthenticated,\n      loading: state.loading,\n      user: state.user,\n      error: state.error\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AuthState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = AuthState;\nexport default AuthState;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthState\");","map":{"version":3,"sources":["/Users/kimau/Desktop/git/mixmatched/client/src/context/auth/AuthState.js"],"names":["React","useReducer","AuthContext","authReducer","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_ERRORS","AuthState","props","initialState","token","localStorage","getItem","isAuthenticated","loading","user","error","state","dispatch","loadUser","res","axios","get","type","payload","data","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,SACIC,WADJ,EAEIC,UAFJ,EAGIC,aAHJ,EAIIC,UAJJ,EAKIC,MALJ,EAMIC,YANJ,QAOO,UAPP;;;AASA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AACzB,QAAMC,YAAY,GAAG;AACjBC,IAAAA,KAAK,EAAEC,YAAY,CAACC,OAAb,CAAqB,OAArB,CADU;AAEjBC,IAAAA,eAAe,EAAE,IAFA;AAGjBC,IAAAA,OAAO,EAAE,IAHQ;AAIjBC,IAAAA,IAAI,EAAE,IAJW;AAKjBC,IAAAA,KAAK,EAAE;AALU,GAArB;AAQA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBpB,UAAU,CAACE,WAAD,EAAcS,YAAd,CAApC,CATyB,CAWzB;;AACA,QAAMU,QAAQ,GAAG,YAAY;AACzB;AAEA,QAAI;AACA,YAAMC,GAAG,GAAG,MAAMC,KAAK,CAACC,GAAN,CAAU,WAAV,CAAlB,CADA,CAGA;;AACAJ,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAEtB,WAAR;AAAqBuB,QAAAA,OAAO,EAAEJ,GAAG,CAACK;AAAlC,OAAD,CAAR;AACH,KALD,CAKE,OAAOT,KAAP,EAAc;AACZE,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAErB;AAAR,OAAD,CAAR;AACH;AACJ,GAXD,CAZyB,CAyBzB;AAEA;AAEA;;;AAEA,sBACI,QAAC,WAAD,CAAa,QAAb;AACI,IAAA,KAAK,EAAE;AACHQ,MAAAA,KAAK,EAAEO,KAAK,CAACP,KADV;AAEHG,MAAAA,eAAe,EAAEI,KAAK,CAACJ,eAFpB;AAGHC,MAAAA,OAAO,EAAEG,KAAK,CAACH,OAHZ;AAIHC,MAAAA,IAAI,EAAEE,KAAK,CAACF,IAJT;AAKHC,MAAAA,KAAK,EAAEC,KAAK,CAACD;AALV,KADX;AAAA,cASKR,KAAK,CAACkB;AATX;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,CA5CD;;GAAMnB,S;;KAAAA,S;AA8CN,eAAeA,SAAf","sourcesContent":["import React, { useReducer } from 'react';\nimport AuthContext from './authContext';\nimport authReducer from './authReducer';\n\nimport {\n    USER_LOADED,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT,\n    CLEAR_ERRORS,\n} from '../types';\n\nconst AuthState = (props) => {\n    const initialState = {\n        token: localStorage.getItem('token'),\n        isAuthenticated: null,\n        loading: true,\n        user: null,\n        error: null,\n    };\n\n    const [state, dispatch] = useReducer(authReducer, initialState);\n\n    // Load User\n    const loadUser = async () => {\n        // TODO: load token into global headers\n\n        try {\n            const res = await axios.get('/api/auth');\n\n            // res.data: valid user data\n            dispatch({ type: USER_LOADED, payload: res.data });\n        } catch (error) {\n            dispatch({ type: AUTH_ERROR });\n        }\n    };\n\n    // Login User\n\n    // Logout - destroy token\n\n    // Clear Errors\n\n    return (\n        <AuthContext.Provider\n            value={{\n                token: state.token,\n                isAuthenticated: state.isAuthenticated,\n                loading: state.loading,\n                user: state.user,\n                error: state.error,\n            }}\n        >\n            {props.children}\n        </AuthContext.Provider>\n    );\n};\n\nexport default AuthState;\n"]},"metadata":{},"sourceType":"module"}