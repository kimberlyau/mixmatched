{"ast":null,"code":"var _jsxFileName = \"/Users/kimau/Desktop/git/mixmatched/client/src/components/results/GoogleChart.js\";\nimport React from 'react';\nimport Chart from 'react-google-charts'; // import festivalData from '../../assets/files/festival-artist-old.json';\n\nimport festivalData from '../../assets/files/festival-artist.json';\nimport festivalEventData from '../../assets/files/festivals.json'; // https://stackoverflow.com/questions/13833463/how-do-i-generate-a-random-hex-code-that-of-a-lighter-color-in-javascript\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction randHex() {\n  return (Math.floor(Math.random() * 56) + 150).toString(16);\n}\n\nfunction randColor() {\n  return `#${randHex() + '' + randHex() + '' + randHex()}`;\n}\n\nconst getFestivalMatches = (festival, artistList) => {\n  let festivalMatch = 0;\n  let festivalMatchList = []; // Check match for particular festival\n\n  for (let i = 0; i < artistList.length; i++) {\n    // Check if artist is in festival\n    if (festival.indexOf(artistList[i]) !== -1) {\n      festivalMatch++;\n      festivalMatchList.push(artistList[i]);\n    }\n  }\n\n  return [festivalMatch, festivalMatchList];\n}; // Source: https://www.positronx.io/react-js-google-stacked-bar-chart-example-tutorial/\n\n\nconst GoogleChart = props => {\n  let artistList = props.dataArray; // Pass in this data\n\n  let data = []; // Header element\n\n  data.push(['Event', 'Match Count', {\n    role: 'style'\n  }, {\n    role: 'annotation'\n  }]);\n  let currMatches;\n  let matchList = []; // Iterate through all festivals\n\n  for (let i = 0; i < festivalEventData.concerts.length; i++) {\n    // Get matches for each event\n    [currMatches, matchList] = getFestivalMatches(festivalData[festivalEventData.concerts[i]], artistList); // Push data into results\n\n    data.push([festivalEventData.concerts[i], currMatches, randColor(), `${matchList.join(',')}`]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: /*#__PURE__*/_jsxDEV(Chart, {\n      width: '700px',\n      height: '320px',\n      chartType: \"BarChart\",\n      loader: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 25\n      }, this),\n      data: data,\n      options: {\n        title: 'Matches to Event',\n        chartArea: {\n          width: '50%'\n        },\n        hAxis: {\n          title: 'Match Count',\n          minValue: 0\n        },\n        vAxis: {\n          title: 'Event'\n        },\n        backgroundColor: '#f5f5f5'\n      },\n      rootProps: {\n        'data-testid': '1'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n\n_c = GoogleChart;\nexport default GoogleChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"GoogleChart\");","map":{"version":3,"sources":["/Users/kimau/Desktop/git/mixmatched/client/src/components/results/GoogleChart.js"],"names":["React","Chart","festivalData","festivalEventData","randHex","Math","floor","random","toString","randColor","getFestivalMatches","festival","artistList","festivalMatch","festivalMatchList","i","length","indexOf","push","GoogleChart","props","dataArray","data","role","currMatches","matchList","concerts","join","title","chartArea","width","hAxis","minValue","vAxis","backgroundColor"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Chart from 'react-google-charts';\n\n// import festivalData from '../../assets/files/festival-artist-old.json';\nimport festivalData from '../../assets/files/festival-artist.json';\nimport festivalEventData from '../../assets/files/festivals.json';\n\n// https://stackoverflow.com/questions/13833463/how-do-i-generate-a-random-hex-code-that-of-a-lighter-color-in-javascript\nfunction randHex() {\n    return (Math.floor(Math.random() * 56) + 150).toString(16);\n}\n\nfunction randColor() {\n    return `#${randHex() + '' + randHex() + '' + randHex()}`;\n}\n\nconst getFestivalMatches = (festival, artistList) => {\n    let festivalMatch = 0;\n    let festivalMatchList = [];\n\n    // Check match for particular festival\n    for (let i = 0; i < artistList.length; i++) {\n        // Check if artist is in festival\n        if (festival.indexOf(artistList[i]) !== -1) {\n            festivalMatch++;\n            festivalMatchList.push(artistList[i]);\n        }\n    }\n    return [festivalMatch, festivalMatchList];\n};\n\n// Source: https://www.positronx.io/react-js-google-stacked-bar-chart-example-tutorial/\nconst GoogleChart = (props) => {\n    let artistList = props.dataArray;\n\n    // Pass in this data\n    let data = [];\n    // Header element\n    data.push([\n        'Event',\n        'Match Count',\n        { role: 'style' },\n        { role: 'annotation' },\n    ]);\n\n    let currMatches;\n    let matchList = [];\n\n    // Iterate through all festivals\n    for (let i = 0; i < festivalEventData.concerts.length; i++) {\n        // Get matches for each event\n        [currMatches, matchList] = getFestivalMatches(\n            festivalData[festivalEventData.concerts[i]],\n            artistList\n        );\n\n        // Push data into results\n        data.push([\n            festivalEventData.concerts[i],\n            currMatches,\n            randColor(),\n            `${matchList.join(',')}`,\n        ]);\n    }\n\n    return (\n        <div className='container mt-5'>\n            {/* <h2>React Basic Bar Chart with Multiple Series</h2> */}\n            <Chart\n                width={'700px'}\n                height={'320px'}\n                chartType='BarChart'\n                loader={<div>Loading Chart</div>}\n                data={data}\n                options={{\n                    title: 'Matches to Event',\n                    chartArea: { width: '50%' },\n                    hAxis: {\n                        title: 'Match Count',\n                        minValue: 0,\n                    },\n                    vAxis: {\n                        title: 'Event',\n                    },\n                    backgroundColor: '#f5f5f5',\n                }}\n                rootProps={{ 'data-testid': '1' }}\n            />\n        </div>\n    );\n};\n\nexport default GoogleChart;\n"]},"metadata":{},"sourceType":"module"}