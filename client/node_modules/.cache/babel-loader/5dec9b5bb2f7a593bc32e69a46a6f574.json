{"ast":null,"code":"var _jsxFileName = \"/Users/kimau/Desktop/git/mixmatched/client/src/components/artists/search.js\";\nimport * as React from 'react';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport TextField from '@mui/material/TextField';\nimport festivalData from '../../assets/files/festival-artist-old.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Search() {\n  console.log(festivalData.festivals.length);\n  let artistList = [];\n  let artistLength = 0; // Iterate through all festivals\n\n  for (let i = 0; i < festivalData.festivals.length; i++) {\n    // Iterate through each artist per festival\n    for (let j = 0; j < festivalData.festivals[i].artists.length; j++) {\n      // Add to artist array if not duplicate\n      if (artistList.map(artistObj => artistObj.title).indexOf(festivalData.festivals[i].artists[j].title) === -1) {\n        artistList.push(festivalData.festivals[i].artists[j]);\n      }\n    }\n  }\n\n  artistLength = artistList.length; // Alphabetize array\n\n  artistList.sort((artistA, artistB) => artistA.title > artistB.title ? 1 : -1);\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    multiple: true // limitTags={3}\n    ,\n    id: \"multiple-limit-tags\",\n    options: artistList,\n    getOptionLabel: option => option.title,\n    defaultValue: [artistList[Math.floor(Math.random() * artistLength)]] //Random value\n    ,\n    isOptionEqualToValue: (option, value) => option.title === value.title,\n    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n      label: \"Search Artists\",\n      placeholder: \"Scroll to see more\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n_c = Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/Users/kimau/Desktop/git/mixmatched/client/src/components/artists/search.js"],"names":["React","Autocomplete","TextField","festivalData","Search","console","log","festivals","length","artistList","artistLength","i","j","artists","map","artistObj","title","indexOf","push","sort","artistA","artistB","option","Math","floor","random","value","params"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AAEA,OAAOC,YAAP,MAAyB,6CAAzB;;AAEA,eAAe,SAASC,MAAT,GAAkB;AAC7BC,EAAAA,OAAO,CAACC,GAAR,CAAYH,YAAY,CAACI,SAAb,CAAuBC,MAAnC;AAEA,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,YAAY,GAAG,CAAnB,CAJ6B,CAM7B;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,YAAY,CAACI,SAAb,CAAuBC,MAA3C,EAAmDG,CAAC,EAApD,EAAwD;AACpD;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,YAAY,CAACI,SAAb,CAAuBI,CAAvB,EAA0BE,OAA1B,CAAkCL,MAAtD,EAA8DI,CAAC,EAA/D,EAAmE;AAC/D;AAEA,UACIH,UAAU,CACLK,GADL,CACUC,SAAD,IAAeA,SAAS,CAACC,KADlC,EAEKC,OAFL,CAEad,YAAY,CAACI,SAAb,CAAuBI,CAAvB,EAA0BE,OAA1B,CAAkCD,CAAlC,EAAqCI,KAFlD,MAE6D,CAAC,CAHlE,EAIE;AACEP,QAAAA,UAAU,CAACS,IAAX,CAAgBf,YAAY,CAACI,SAAb,CAAuBI,CAAvB,EAA0BE,OAA1B,CAAkCD,CAAlC,CAAhB;AACH;AACJ;AACJ;;AAEDF,EAAAA,YAAY,GAAGD,UAAU,CAACD,MAA1B,CAtB6B,CAwB7B;;AACAC,EAAAA,UAAU,CAACU,IAAX,CAAgB,CAACC,OAAD,EAAUC,OAAV,KACZD,OAAO,CAACJ,KAAR,GAAgBK,OAAO,CAACL,KAAxB,GAAgC,CAAhC,GAAoC,CAAC,CADzC;AAIA,sBACI,QAAC,YAAD;AACI,IAAA,QAAQ,MADZ,CAEI;AAFJ;AAGI,IAAA,EAAE,EAAC,qBAHP;AAII,IAAA,OAAO,EAAEP,UAJb;AAKI,IAAA,cAAc,EAAGa,MAAD,IAAYA,MAAM,CAACN,KALvC;AAMI,IAAA,YAAY,EAAE,CACVP,UAAU,CAACc,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBf,YAA3B,CAAD,CADA,CANlB,CAQO;AARP;AASI,IAAA,oBAAoB,EAAE,CAACY,MAAD,EAASI,KAAT,KAClBJ,MAAM,CAACN,KAAP,KAAiBU,KAAK,CAACV,KAV/B;AAYI,IAAA,WAAW,EAAGW,MAAD,iBACT,QAAC,SAAD,OACQA,MADR;AAEI,MAAA,KAAK,EAAC,gBAFV;AAGI,MAAA,WAAW,EAAC;AAHhB;AAAA;AAAA;AAAA;AAAA;AAbR;AAAA;AAAA;AAAA;AAAA,UADJ;AAsBH;KAnDuBvB,M","sourcesContent":["import * as React from 'react';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport TextField from '@mui/material/TextField';\n\nimport festivalData from '../../assets/files/festival-artist-old.json';\n\nexport default function Search() {\n    console.log(festivalData.festivals.length);\n\n    let artistList = [];\n    let artistLength = 0;\n\n    // Iterate through all festivals\n    for (let i = 0; i < festivalData.festivals.length; i++) {\n        // Iterate through each artist per festival\n        for (let j = 0; j < festivalData.festivals[i].artists.length; j++) {\n            // Add to artist array if not duplicate\n\n            if (\n                artistList\n                    .map((artistObj) => artistObj.title)\n                    .indexOf(festivalData.festivals[i].artists[j].title) === -1\n            ) {\n                artistList.push(festivalData.festivals[i].artists[j]);\n            }\n        }\n    }\n\n    artistLength = artistList.length;\n\n    // Alphabetize array\n    artistList.sort((artistA, artistB) =>\n        artistA.title > artistB.title ? 1 : -1\n    );\n\n    return (\n        <Autocomplete\n            multiple\n            // limitTags={3}\n            id='multiple-limit-tags'\n            options={artistList}\n            getOptionLabel={(option) => option.title}\n            defaultValue={[\n                artistList[Math.floor(Math.random() * artistLength)],\n            ]} //Random value\n            isOptionEqualToValue={(option, value) =>\n                option.title === value.title\n            }\n            renderInput={(params) => (\n                <TextField\n                    {...params}\n                    label='Search Artists'\n                    placeholder='Scroll to see more'\n                />\n            )}\n        />\n    );\n}\n"]},"metadata":{},"sourceType":"module"}